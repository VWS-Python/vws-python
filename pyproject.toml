[tool.pylint]

    [tool.pylint.'MASTER']

    # Pickle collected data for later comparisons.
    persistent = true

    # Use multiple processes to speed up Pylint.
    jobs = 0

    # List of plugins (as comma separated values of python modules names) to load,
    # usually to register additional checkers.
    load-plugins = [
        'pylint.extensions.docparams',
        'pylint.extensions.no_self_use',
    ]

    # Allow loading of arbitrary C extensions. Extensions are imported into the
    # active Python interpreter and may run arbitrary code.
    unsafe-load-any-extension = false

    [tool.pylint.'MESSAGES CONTROL']

    # Enable the message, report, category or checker with the given id(s). You can
    # either give multiple identifier separated by comma (,) or put this option
    # multiple time (only on the command line, not in the configuration file where
    # it should appear only once). See also the "--disable" option for examples.
    enable = [
        'spelling',
        'useless-suppression',
    ]

    # Disable the message, report, category or checker with the given id(s). You
    # can either give multiple identifiers separated by comma (,) or put this
    # option multiple times (only on the command line, not in the configuration
    # file where it should appear only once).You can also use "--disable=all" to
    # disable everything first and then reenable specific checks. For example, if
    # you want to run only the similarities checker, you can use "--disable=all
    # --enable=similarities". If you want to run only the classes checker, but have
    # no Warning level messages displayed, use"--disable=all --enable=classes
    # --disable=W"

    disable = [
        'too-few-public-methods',
        'too-many-locals',
        'too-many-arguments',
        'too-many-instance-attributes',
        'too-many-return-statements',
        'too-many-lines',
        'locally-disabled',
        # Let ruff handle long lines
        'line-too-long',
        # Let ruff handle unused imports
        'unused-import',
        # Let ruff deal with sorting
        'ungrouped-imports',
        # We don't need everything to be documented because of mypy
        'missing-type-doc',
        'missing-return-type-doc',
        # Too difficult to please
        'duplicate-code',
        # Let ruff handle imports
        'wrong-import-order',
        # mypy does not want untyped parameters.
        'useless-type-doc',
    ]

    [tool.pylint.'FORMAT']

    # Allow the body of an if to be on the same line as the test if there is no
    # else.
    single-line-if-stmt = false

    [tool.pylint.'SPELLING']

    # Spelling dictionary name. Available dictionaries: none. To make it working
    # install python-enchant package.
    spelling-dict = 'en_US'

    # A path to a file that contains private dictionary; one word per line.
    spelling-private-dict-file = 'spelling_private_dict.txt'

    # Tells whether to store unknown words to indicated private dictionary in
    # --spelling-private-dict-file option instead of raising a message.
    spelling-store-unknown-words = 'no'

[tool.coverage.run]

branch = true

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "if TYPE_CHECKING:"]

[tool.pytest.ini_options]

xfail_strict = true
log_cli = true

[tool.check-manifest]

ignore = [
    "*.enc",
    "readthedocs.yaml",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.rst",
    "CONTRIBUTING.rst",
    "LICENSE",
    "Makefile",
    "ci",
    "ci/**",
    "codecov.yaml",
    "doc8.ini",
    "docs",
    "docs/**",
    ".git_archival.txt",
    "spelling_private_dict.txt",
    "tests",
    "tests-pylintrc",
    "tests/**",
    "vuforia_secrets.env.example",
    "lint.mk",
]

[tool.doc8]

max_line_length = 2000
ignore_path = [
    "./.eggs",
    "./docs/build",
    "./docs/build/spelling/output.txt",
    "./node_modules",
    "./src/*.egg-info/",
    "./src/*/_setuptools_scm_version.txt",
]

[tool.mypy]

strict = true

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "pip",
    "setuptools",
    "setuptools_scm[toml]>=7.1",
    "wheel",
]

[tool.distutils.bdist_wheel]
universal = true

[tool.ruff]
select = ["ALL"]
line-length = 79

ignore = [
    # We do not annotate the type of 'self'.
    "ANN101",
    # We are happy to manage our own "complexity".
    "C901",
    # Allow our chosen docstring line-style - no one-line summary.
    "D200",
    "D203",
    "D205",
    "D212",
    "D213",
    # It is too much work to make every docstring imperative.
    "D401",
    # We ignore some docstyle errors which do not apply to Google style
    # docstrings.
    "D406",
    "D407",
    # We have an existing interface to support and so we do not want to change
    # exception names.
    "N818",
    # Ignore "too-many-*" errors as they seem to get in the way more than
    # helping.
    "PLR0913",
    # Allow 'assert' as we use it for tests.
    "S101",
    # Allow simple random numbers as we are not using them for cryptography.
    "S311",
]

# Do not automatically remove commented out code.
# We comment out code during development, and with VSCode auto-save, this code
# is sometimes annoyingly removed.
unfixable = ["ERA001"]

[tool.ruff.per-file-ignores]
"tests/test_*.py" = [
    # Do not require tests to have a one-line summary.
    "D205",
]

[project]
name = "vws-python"
description = "Interact with the Vuforia Web Services (VWS) API."
readme = { file = "README.rst", content-type = "text/x-rst"}
keywords = [
    "client",
    "vuforia",
    "vws",
]
license = { file = "LICENSE" }
authors = [ { name = "Adam Dangoor", email = "adamdangoor@gmail.com"} ]
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
]
dynamic = [
    "version",
]
dependencies = [
    "requests",
    "urllib3",
    "VWS-Auth-Tools",
]
[project.optional-dependencies]
dev = [
    "check-manifest==0.49",
    "doc8==1.1.1",
    "dodgy==0.2.1",
    "freezegun==1.4.0",
    "furo==2023.9.10",
    "mypy==1.8.0",
    "pdm==2.11.1",
    "pip_check_reqs==2.5.3",
    "pydocstyle==6.3",
    "pyenchant==3.2.2",
    "Pygments==2.17.2",
    "pylint==3.0.3",
    "pyproject-fmt==1.5.3",
    "pyright==1.1.343",
    "pyroma==4.2",
    "pytest==7.4.3",
    "pytest-cov==4.1",
    "PyYAML==6.0.1",
    "ruff==0.1.9",
    "Sphinx==7.2.6",
    "sphinx-autodoc-typehints==1.25.2",
    "sphinx-prompt==1.8",
    "Sphinx-Substitution-Extensions==2022.2.16",
    "sphinxcontrib-spelling==8",
    "sybil==6.0.2",
    "types-requests==2.31.0.10",
    "vulture==2.10",
    "VWS-Python-Mock==2023.5.21",
    "VWS-Test-Fixtures==2023.3.5",
]
[project.urls]
Documentation = "https://vws-python.readthedocs.io/en/latest/"
Source = "https://github.com/VWS-Python/vws-python"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
vws = ["py.typed"]

[tool.setuptools_scm]

[tool.pyright]

typeCheckingMode = "strict"
