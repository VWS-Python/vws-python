[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "pip",
    "setuptools",
    "setuptools-scm[toml]>=7.1",
    "wheel",
]

[project]
name = "vws-python"
description = "Interact with the Vuforia Web Services (VWS) API."
readme = { file = "README.rst", content-type = "text/x-rst" }
keywords = [
    "client",
    "vuforia",
    "vws",
]
license = { file = "LICENSE" }
authors = [
    { name = "Adam Dangoor", email = "adamdangoor@gmail.com" },
]
requires-python = ">=3.12"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
]
dynamic = [
    "version",
]
dependencies = [
    "beartype>=0.18.5",
    "requests",
    "urllib3",
    "vws-auth-tools",
]
optional-dependencies.dev = [
    "actionlint-py==1.7.1.15",
    "check-manifest==0.49",
    "deptry==0.20.0",
    "doc8==1.1.1",
    "freezegun==1.5.1",
    "furo==2024.8.6",
    "interrogate==1.7.0",
    "mypy==1.11.2",
    "pre-commit==3.8.0",
    "pydocstyle==6.3",
    "pyenchant==3.2.2",
    "pygments==2.18.0",
    "pylint==3.2.7",
    "pyproject-fmt==2.2.1",
    "pyright==1.1.378",
    "pyroma==4.2",
    "pytest==8.3.2",
    "pytest-cov==5.0.0",
    "pyyaml==6.0.2",
    "ruff==0.6.3",
    "sphinx==8.0.2",
    "sphinx-copybutton==0.5.2",
    "sphinx-substitution-extensions==2024.8.6",
    "sphinxcontrib-spelling==8",
    "sybil==6.1.1",
    "types-requests==2.32.0.20240712",
    "vulture==2.11",
    "vws-python-mock==2024.8.30",
    "vws-test-fixtures==2023.3.5",
]
urls.Documentation = "https://vws-python.readthedocs.io/en/latest/"
urls.Source = "https://github.com/VWS-Python/vws-python"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = [
    "src",
]

[tool.setuptools.package-data]
vws = [
    "py.typed",
]

[tool.distutils.bdist_wheel]
universal = true

[tool.setuptools_scm]

[tool.ruff]
line-length = 79

lint.select = [
    "ALL",
]
lint.ignore = [
    # We do not annotate the type of 'self'.
    "ANN101",
    # We are happy to manage our own "complexity".
    "C901",
    # Ruff warns that this conflicts with the formatter.
    "COM812",
    # Allow our chosen docstring line-style - no one-line summary.
    "D200",
    "D205",
    "D212",
    "D415",
    # Ruff warns that this conflicts with the formatter.
    "ISC001",
    # Ignore "too-many-*" errors as they seem to get in the way more than
    # helping.
    "PLR0913",
    # Allow 'assert' as we use it for tests.
    "S101",
]

lint.per-file-ignores."conftest.py" = [
    # Allow hardcoded secrets in tests.
    "S106",
]

lint.per-file-ignores."tests/*.py" = [
    # Do not require tests to have a one-line summary.
    "D205",
]

# Do not automatically remove commented out code.
# We comment out code during development, and with VSCode auto-save, this code
# is sometimes annoyingly removed.
lint.unfixable = [
    "ERA001",
]
lint.pydocstyle.convention = "google"

[tool.pylint]

[tool.pylint.'MASTER']

# Pickle collected data for later comparisons.
persistent = true

# Use multiple processes to speed up Pylint.
jobs = 0

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
# See https://chezsoi.org/lucas/blog/pylint-strict-base-configuration.html.
# We do not use the plugins:
# - pylint.extensions.code_style
# - pylint.extensions.magic_value
# - pylint.extensions.while_used
# as they seemed to get in the way.
load-plugins = [
    'pylint.extensions.bad_builtin',
    'pylint.extensions.comparison_placement',
    'pylint.extensions.consider_refactoring_into_while_condition',
    'pylint.extensions.docparams',
    'pylint.extensions.dunder',
    'pylint.extensions.eq_without_hash',
    'pylint.extensions.for_any_all',
    'pylint.extensions.mccabe',
    'pylint.extensions.no_self_use',
    'pylint.extensions.overlapping_exceptions',
    'pylint.extensions.private_import',
    'pylint.extensions.redefined_loop_name',
    'pylint.extensions.redefined_variable_type',
    'pylint.extensions.set_membership',
    'pylint.extensions.typing',
]

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = false

[tool.pylint.'MESSAGES CONTROL']

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
enable = [
    'bad-inline-option',
    'deprecated-pragma',
    'file-ignored',
    'spelling',
    'use-symbolic-message-instead',
    'useless-suppression',
]

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"

disable = [
    'too-few-public-methods',
    'too-many-locals',
    'too-many-arguments',
    'too-many-instance-attributes',
    'too-many-return-statements',
    'too-many-lines',
    'locally-disabled',
    # Let ruff handle long lines
    'line-too-long',
    # Let ruff handle unused imports
    'unused-import',
    # Let ruff deal with sorting
    'ungrouped-imports',
    # We don't need everything to be documented because of mypy
    'missing-type-doc',
    'missing-return-type-doc',
    # Too difficult to please
    'duplicate-code',
    # Let ruff handle imports
    'wrong-import-order',
    # mypy does not want untyped parameters.
    'useless-type-doc',
]

[tool.pylint.'FORMAT']

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = false

[tool.pylint.'SPELLING']

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict = 'en_US'

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file = 'spelling_private_dict.txt'

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words = 'no'

[tool.check-manifest]

ignore = [
    "*.enc",
    ".pre-commit-config.yaml",
    "readthedocs.yaml",
    "CHANGELOG.rst",
    "CODE_OF_CONDUCT.rst",
    "CONTRIBUTING.rst",
    "LICENSE",
    "Makefile",
    "ci",
    "ci/**",
    "codecov.yaml",
    "doc8.ini",
    "docs",
    "docs/**",
    ".git_archival.txt",
    "spelling_private_dict.txt",
    "tests",
    "tests-pylintrc",
    "tests/**",
    "vuforia_secrets.env.example",
    "lint.mk",
]

[tool.deptry]
pep621_dev_dependency_groups = [
    "dev",
]

[tool.pyproject-fmt]
indent = 4
keep_full_version = true

[tool.pytest.ini_options]

xfail_strict = true
log_cli = true

[tool.coverage.run]

branch = true

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.mypy]

strict = true

[tool.pyright]

reportUnnecessaryTypeIgnoreComment = true
typeCheckingMode = "strict"

[tool.interrogate]
fail-under = 100
omit-covered-files = true
verbose = 2

[tool.doc8]

max_line_length = 2000
ignore_path = [
    "./.eggs",
    "./docs/build",
    "./docs/build/spelling/output.txt",
    "./node_modules",
    "./src/*.egg-info/",
    "./src/*/_setuptools_scm_version.txt",
]
